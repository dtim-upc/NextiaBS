plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group 'edu.upc.essi.dtim'
version '1.0-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    implementation group: 'org.apache.jena', name: 'apache-jena-libs', version: '4.1.0', ext: 'pom'
    implementation group: 'org.apache.jena', name: 'jena-querybuilder', version: '4.1.0'

    implementation group: 'net.minidev', name: 'json-smart', version: '2.4.7'
    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

    implementation fileTree(dir: 'lib', include: ['*.jar'])


    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    //implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
//    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.24'


    // https://mvnrepository.com/artifact/org.apache.spark/spark-sql
    implementation 'org.apache.spark:spark-sql_2.13:3.3.2'

    implementation group: 'org.apache.parquet', name: 'parquet-hadoop', version: '1.10.0'
    implementation group: 'org.apache.hadoop', name: 'hadoop-common', version: '3.3.6'



    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

}

test {
    useJUnitPlatform()
}

task uberJar(type: Jar) {
    duplicatesStrategy = 'exclude'
    archiveClassifier = 'uber'
    zip64(true)

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}


//para copiar la versión actualizada de NextiaCore y NextiaDI (modificar segun ruta propia)
def nextiaCoreJarPath = '../NextiaCore/build/libs/nextiacore-0.0.2-SNAPSHOT-uber.jar'

task importExternalJar {
    doLast {
        //creamos la carpeta lib si no existe
        def libFolder = new File("..\\NextiaBS\\lib")

        if (!libFolder.exists()) {
            libFolder.mkdir()
        }

        //////////////////////////COPIAR NEXTIACORE JAR
        configurations.compileClasspath.files.find { it.name == 'nextiacore-0.0.2-SNAPSHOT-uber.jar' }?.delete()
        configurations.compileClasspath.files.find { it.name == 'NextiaCore.jar' }?.delete()

        copy {
            from nextiaCoreJarPath
            into "..\\NextiaBS\\lib"
            rename { 'NextiaCore.jar' }
        }
        /////////////////////////////////////////////////
    }
}

//Task to export NextiaCore
task copyJarToOtherProjects() {
    uberJar

    def ODIN = '..\\ODIN\\api\\lib'

    def nextiaBSJarPath = "build/libs/NextiaBS-1.0-SNAPSHOT-uber.jar"

    // Define the target projects
    def targetProjects = [ODIN]

    // Create a copy task for each project directory
    targetProjects.each { path ->
        // Ensure the directory exists
        new File(path).mkdirs()

        // Remove previous versions
        new File(path, 'NextiaBS.jar').delete()
        new File(path, 'NextiaBS-1.0-SNAPSHOT-uber.jar').delete()

        copy {
            println "JAR copying to project: $path"
            from nextiaBSJarPath
            rename { 'NextiaBS.jar' }
            into path
            doLast {
                println "JAR copied to project: $path"
            }
        }
    }
}

// La tarea de copia a los otros proyectos se ejecuta después de la tarea de generación de JAR
copyJarToOtherProjects.dependsOn uberJar